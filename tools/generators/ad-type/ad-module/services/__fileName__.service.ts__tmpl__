import { Ad<%= className %>, Ad<%= className %>Document } from '@hepsikredili/api/main/shared';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import * as $ from 'mongo-dot-notation';
import { FilterQuery, Model } from 'mongoose';
import { Create<%= className %>Dto } from '../dtos/create-<%= fileName %>.dto';
import { Query<%= className %>Dto } from '../dtos/query-<%= fileName %>.dto';
import { Update<%= className %>Dto } from '../dtos/update-<%= fileName %>.dto';

@Injectable()
export class <%= className %>Service {
  constructor(
    @InjectModel(Ad<%= className %>.name)
    private readonly ad<%= className %>Model: Model<Ad<%= className %>Document>
  ) {}

  async findAll(query<%= className %>Dto: Query<%= className %>Dto): Promise<Ad<%= className %>[]> {
    const { search, name, adLimitGt, adLimitLte, priceGt, priceLte } =
      query<%= className %>Dto;

    const filter: FilterQuery<Ad<%= className %>Document> = {};

    if (name) filter.name = name;
    if (adLimitGt || adLimitLte) {
      filter.adLimit = {};
      if (adLimitGt) filter.adLimit.$gt = adLimitGt;
      if (adLimitLte) filter.adLimit.$lte = adLimitLte;
    }
    if (priceGt || priceLte) {
      filter.price = {};
      if (priceGt) filter.price.$gt = priceGt;
      if (priceLte) filter.price.$lte = priceLte;
    }
    if (search) filter.$text = { $search: search?.trim() };

    return await this.ad<%= className %>Model.find(filter).exec();
  }

  async findOneById(id: string): Promise<Ad<%= className %> | null> {
    return await this.ad<%= className %>Model.findById(id).exec();
  }

  async create(create<%= className %>Dto: Create<%= className %>Dto): Promise<Ad<%= className %>> {
    const ad<%= className %> = new this.ad<%= className %>Model(create<%= className %>Dto);
    return await ad<%= className %>.save();
  }

  async update(id: string, update<%= className %>Dto: Update<%= className %>Dto) {
    const instructions = $.flatten(update<%= className %>Dto);

    return await this.ad<%= className %>Model
      .findByIdAndUpdate(id, instructions, { new: true })
      .exec();
  }

  async remove(id: string) {
    return await this.ad<%= className %>Model.findByIdAndRemove(id, { new: true }).exec();
  }
}
